import requests
import asyncio
import sqlite3
import json
from datetime import datetime, timedelta
from telegram import Bot
from telegram.ext import Application, CommandHandler
import time
import threading
import logging


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É –Ω–∞ Binance
def get_current_price(symbol):
	url = f"https://fapi.binance.com/fapi/v2/ticker/price?symbol={symbol.upper()}"
	response = requests.get(url)
	data = response.json()

	# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –≤ –¥–∞–Ω–∏—Ö
	if "price" in data:
		return float(data["price"])
	else:
		return None  # –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def create_connection():
	conn = sqlite3.connect("crypto_bot.db")
	return conn


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def check_alerts():
	conn = create_connection()
	cursor = conn.cursor()

	cursor.execute("SELECT * FROM alerts")
	alerts = cursor.fetchall()

	# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	def delete_alert(alert_id):
		conn = create_connection()
		cursor = conn.cursor()
		cursor.execute("DELETE FROM alerts WHERE id = ?", (alert_id,))
		conn.commit()
		conn.close()

	for alert in alerts:
		alert_id = alert[0]  # ID –∞–ª–µ—Ä—Ç–∞
		symbol = alert[1].lstrip("/")  # –°–∏–º–≤–æ–ª, –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ª–µ—à, —è–∫—â–æ –≤—ñ–Ω —î
		alert_price = alert[2]  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞
		chat_id = alert[3]  # Chat ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

		current_price = get_current_price(symbol)

		if current_price is not None and current_price >= alert_price:
			message = f"üö® {symbol} –¥–æ—Å—è–≥ {alert_price}$! –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}$."
			send_telegram_message(chat_id, message)

			# –í–∏–¥–∞–ª—è—î–º–æ –∞–ª–µ—Ä—Ç –ø—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
			delete_alert(alert_id)

	conn.close()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram
def send_telegram_message(chat_id, message):
	bot_token = "7567505791:AAE5Yqbd7gG9ydsx2_inJJmnS1Ln6rmh2Ts"
	url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
	payload = {"chat_id": chat_id, "text": message}
	requests.post(url, data=payload)


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç—ñ–≤ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ
def check_alerts_periodically():
	while True:
		check_alerts()  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–ª–µ—Ä—Ç–∏
		time.sleep(3)  # –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é


# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
alert_thread = threading.Thread(target=check_alerts_periodically)
alert_thread.daemon = True
alert_thread.start()


# –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
def add_alert(symbol, price, chat_id):
	conn = create_connection()
	cursor = conn.cursor()
	cursor.execute(
		"INSERT INTO alerts (symbol, price, chat_id) VALUES (?, ?, ?)",
		(symbol, price, chat_id),
	)
	conn.commit()
	conn.close()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def check_alert(symbol, price):
	conn = create_connection()
	cursor = conn.cursor()

	cursor.execute("SELECT * FROM alerts WHERE symbol = ? AND price = ?", (symbol, price))
	alert = cursor.fetchone()

	conn.close()
	return alert


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–≤–æ–ª—É –Ω–∞ Binance
# TODO: load all symbols once on startup, check against it (pointless roundtrip rn)
def is_valid_symbol(symbol):
	# –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–µ—à –ø–µ—Ä–µ–¥ —Å–∏–º–≤–æ–ª–æ–º, —è–∫—â–æ –≤—ñ–Ω —î
	symbol = symbol.lstrip("/")

	url = f"https://fapi.binance.com/fapi/v2/ticker/price?symbol={symbol.upper()}"
	response = requests.get(url)
	data = response.json()

	# –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ False
	return "price" in data


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /addalert
async def add_alert_command(update, context):
	if len(context.args) != 2:
		await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /addalert <—Å–∏–º–≤–æ–ª> <—Ü—ñ–Ω–∞>")
		return

	symbol = context.args[0].upper()  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "ETHUSDT"
	price = float(context.args[1])  # –¶—ñ–Ω–∞ —è–∫ float
	chat_id = update.message.chat_id  # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

	# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –Ω–∞ Binance
	if not is_valid_symbol(symbol):
		await update.message.reply_text(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–∞ Binance. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª.")
		return

	add_alert(symbol, price, chat_id)  # –î–æ–¥–∞—î–º–æ –∞–ª–µ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
	await update.message.reply_text(f"–ê–ª–µ—Ä—Ç –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Ü—ñ–Ω—É {price}$.")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /checkalert
async def check_alert_command(update, context):
	if len(context.args) != 2:
		await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /checkalert <—Å–∏–º–≤–æ–ª> <—Ü—ñ–Ω–∞>")
		return

	symbol = context.args[0].upper()  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "ETHUSDT"
	price = float(context.args[1])  # –¶—ñ–Ω–∞ —è–∫ float

	# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
	conn = create_connection()
	cursor = conn.cursor()

	cursor.execute("SELECT * FROM alerts WHERE symbol = ? AND price = ?", (symbol, price))
	alert = cursor.fetchone()  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–ª–µ—Ä—Ç

	conn.close()

	if alert:
		await update.message.reply_text(f"–ê–ª–µ—Ä—Ç –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Ü—ñ–Ω—É {price}$.")
	else:
		await update.message.reply_text(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {symbol} –Ω–∞ —Ü—ñ–Ω—É {price}$.")


TOKEN = "7567505791:AAE5Yqbd7gG9ydsx2_inJJmnS1Ln6rmh2Ts"
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–∞ –¥–ª—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("addalert", add_alert_command))
application.add_handler(CommandHandler("checkalert", check_alert_command))

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == "__main__":
	application.run_polling()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É —Ç–∞ Chat ID
CHAT_ID_FILE = "chat_ids.json"
try:
	with open(CHAT_ID_FILE, "r") as file:
		config = json.load(file)
except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
	print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON: {e}")
	config = {"TOKEN": "", "CHAT_ID": []}
	with open(CHAT_ID_FILE, "w") as file:
		json.dump(config, file)

TOKEN = config.get("TOKEN", "")
CHAT_IDS = config.get("CHAT_ID", [])

if not TOKEN:
	raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π!")

BASE_URL = "https://fapi.binance.com"
ENDPOINT = "/fapi/v1/ticker/price"
THRESHOLDS = [0.01, 0.04, 0.09, 0.20]  # –ü–æ—Ä–æ–≥–∏ –∑–º—ñ–Ω: 2%, 4%, 9%, 20%
CHECK_INTERVAL = 1.5  # –û–±–º–µ–∂–µ–Ω–Ω—è Binance - 1 —Ä–∞–∑ –Ω–∞ 1.5 —Å–µ–∫—É–Ω–¥–∏

bot = Bot(token=TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ –∫–ª—é—á–µ–º —Å–∏–º–≤–æ–ª—É
price_history = {}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()


# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ü—ñ–Ω –∑ Binance
async def get_current_prices():
	try:
		logger.debug("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –¥–æ API Binance –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω...")
		response = requests.get(BASE_URL + ENDPOINT, timeout=5)
		logger.debug(f"–ó–∞–ø–∏—Ç –¥–æ API Binance, —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}")

		if response.status_code == 200:
			prices = response.json()
			logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ —Ü—ñ–Ω–∏: {prices}")
			return {item["symbol"]: float(item["price"]) for item in prices}
		else:
			logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω: {response.status_code} - {response.text}")
			return {}
	except requests.exceptions.RequestException as e:
		logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")
		return {}


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω —Ü—ñ–Ω–∏
async def check_price_changes(new_prices):
	now = datetime.now()
	messages = []

	logger.debug(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω –¥–ª—è: {new_prices}")

	for symbol, new_price in new_prices.items():
		data = price_history.get(symbol)

		# –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è —Ü—ñ–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É –≤—ñ–¥—Å—É—Ç–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
		if data is None:
			price_history[symbol] = {"open_price": new_price, "last_checked": now}
			logger.debug(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è {symbol}: {new_price}")
			continue

		open_price = data["open_price"]
		last_checked = data["last_checked"]

		# –Ø–∫—â–æ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –≤—ñ–¥–±—É–ª–∞—Å—å –±—ñ–ª—å—à–µ –Ω—ñ–∂ 5 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É —Ü—ñ–Ω—É
		if now - last_checked >= timedelta(minutes=5):
			price_history[symbol] = {"open_price": new_price, "last_checked": now}
			logger.debug(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {new_price}")
			continue

		# –û–±—á–∏—Å–ª—é—î–º–æ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏
		change = (new_price - open_price) / open_price
		abs_change = abs(change)

		# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä–æ–≥–∏
		for threshold in THRESHOLDS:
			if abs_change >= threshold and not data.get(f"notified_{threshold}", False):
				direction = "üü¢" if change > 0 else "üî¥"
				change_percent = abs_change * 100
				message = f"{direction} {symbol} BINANCE 5m {change_percent:.1f}%"
				messages.append(message)
				price_history[symbol][f"notified_{threshold}"] = True
				logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {message}")
				break

	await send_notifications(messages)


# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def send_notifications(messages):
	if messages:
		full_message = "\n".join(messages)  # –û–±'—î–¥–Ω—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ–¥–Ω–µ
		logger.debug(f"–ì–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {full_message}")
		for chat_id in CHAT_IDS:
			try:
				await bot.send_message(chat_id=chat_id, text=full_message)
				logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ {chat_id}: {full_message}")
			except Exception as e:
				logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ {chat_id}: {e}")


async def main():
	while True:
		new_prices = await get_current_prices()
		if new_prices:
			await check_price_changes(new_prices)
		await asyncio.sleep(CHECK_INTERVAL)
